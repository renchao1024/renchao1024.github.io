<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AttributeError module &#39;time&#39; has no attribute &#39;clock&#39; 解决方法</title>
      <link href="/2022/01/11/AttributeError%20module%20&#39;time&#39;%20has%20no%20attribute%20&#39;clock&#39;%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/01/11/AttributeError%20module%20&#39;time&#39;%20has%20no%20attribute%20&#39;clock&#39;%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="一、问题："><a href="#一、问题：" class="headerlink" title="一、问题："></a>一、问题：</h5><p>在python3.8环境下使用<code>time.clock()</code>会出现报错：<code>AttributeError module &#39;time&#39; has no attribute &#39;clock&#39;</code> </p><span id="more"></span><p>在pycharm或者idea中提示<code>time</code>中是有<code>clock()</code>方法的，不会给报错，但是一旦运行调用这个方法就会出现上述错误，因为实际上python3.8已经不再支持<code>time.clock()</code>方法了。</p><h5 id="二、解决方法："><a href="#二、解决方法：" class="headerlink" title="二、解决方法："></a>二、解决方法：</h5><p>使用<code>time.perf_counter()</code>来代替原本的<code>time.clock()</code>，之后可正确运行调用</p>]]></content>
      
      
      <categories>
          
          <category> 日常问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《随便翻翻》读后小感</title>
      <link href="/2021/12/25/%E3%80%8A%E9%9A%8F%E4%BE%BF%E7%BF%BB%E7%BF%BB%E3%80%8B%E8%AF%BB%E5%90%8E%E5%B0%8F%E6%84%9F/"/>
      <url>/2021/12/25/%E3%80%8A%E9%9A%8F%E4%BE%BF%E7%BF%BB%E7%BF%BB%E3%80%8B%E8%AF%BB%E5%90%8E%E5%B0%8F%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>《随便翻翻》是收录在《且介亭杂文》的一篇杂文，鲁迅先生开门见山：“我想讲一点我的当作消闲的读书——随便翻翻。但如果弄得不好，会受害也说不定的。”</p><span id="more"></span><p>当作消闲的读书，自然便无法看的那么细致，甚至于这类读书有时会被各种各样的事情打断，以致于看的更是粗略，在脑中留下的印象便是更浅了几分。自然，这么读书几乎可以肯定无法做到“精”，看的书多了，接触面也就广了，书，或者说知识，也就“杂”了。自古至今有许多人都对“杂”这个字不带有好感，但“杂”也并非全是坏事。</p><p>读书也好，其他面的钻研也罢，能研究的足够“深”便可以被称为大佬，倘若深度不够，徒有广度，那也是不够的，更多的情况下是会被称为是“杂而不精”，然而，于我个人而言，在保证一定深度的情况下，广度也是有必要的。如若接触过、了解过，即使算不上了解，但始终是留下一些印象的，这些或许不会对现在正在进行的主业有太大的帮助，但是人生在世，活法万千，有的人在某一方面做到极致，这样的人无疑是极厉害的，但倘若某人在主业并没有特别精通，只是在稳步前进，但却涉猎广泛，无论天文地理都略知一二，那也算得上是精彩。</p><p>人不只要和其他人比，更重要的是和自己比，如何追求并无高低，个人选择罢了。</p><p>当然，能做到这样更好。</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106155208787.png" alt="image-20220106155208787"></p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>127.0.0.1和localhost不能正确映射的问题</title>
      <link href="/2021/12/23/127.0.0.1%E5%92%8Clocalhost%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E6%98%A0%E5%B0%84%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/23/127.0.0.1%E5%92%8Clocalhost%E4%B8%8D%E8%83%BD%E6%AD%A3%E7%A1%AE%E6%98%A0%E5%B0%84%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>适用情形：访问localhost时报500，比如：</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211223160446997.png" alt="image-20211223160446997"></p><span id="more"></span><h4 id="解决如下："><a href="#解决如下：" class="headerlink" title="解决如下："></a>解决如下：</h4><h4 id="检查："><a href="#检查：" class="headerlink" title="检查："></a><strong>检查：</strong></h4><p>分别ping127.0.0.1和localhost</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211223154534575.png" alt="image-20211223154534575"></p><p>如果出错的话，结果可能是这样的：</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211223155624050.png" alt="image-20211223155624050"></p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a><strong>解决方案：</strong></h4><h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><p>​    在浏览器访问<a href="http://127.0.0.1/">http://127.0.0.1</a></p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211223154834368.png" alt="image-20211223154834368"></p><p>会出现以上画面，如果不能正确访问，可能是IIS有问题，需要重装：</p><p>打开控制面板，按以下步骤（注意：IIS要展开才能全选）</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211223155216928.png" alt="image-20211223155216928"></p><h5 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h5><p>第一种方法不适用的情况下，查看你的host文件，目录在：</p><p>C:\Windows\System32\drivers\etc</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211223155513736.png" alt="image-20211223155513736"></p><p>看看有没有这两行，没有的话加到最后就行</p><h5 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h5><p>修改优先级，如果前两种都无效可以看看这个：<a href="https://blog.csdn.net/ambertian/article/details/70238020">修改IPv6优先级</a></p><h4 id="127-0-0-1和localhost："><a href="#127-0-0-1和localhost：" class="headerlink" title="127.0.0.1和localhost："></a>127.0.0.1和localhost：</h4><p>前者是一个ip地址，</p><p>而localhost是一个域名，一般指向127.0.0.1，所以通常会把它们等同起来。</p><p>但是在 ipv6 后，它同时还指向ipv6 的地址 [::1]，ipv6的优先级高，所以我们ping的时候，会默认指向[::1]。</p><p>[::1]是0:0:0:0:0:0:0:1的简写，代表IPv6中的本地回环地址，相当于IPv4中的127.0.0.1。</p><p>localhost作为域名也可以不指向127.0.0.1，在host文件中修改。</p>]]></content>
      
      
      <categories>
          
          <category> 日常问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> localhost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>This is a development server. Do not use it in a production deployment.</title>
      <link href="/2021/12/23/This%20is%20a%20development%20server.%20Do%20not%20use%20it%20in%20a%20production%20deployment./"/>
      <url>/2021/12/23/This%20is%20a%20development%20server.%20Do%20not%20use%20it%20in%20a%20production%20deployment./</url>
      
        <content type="html"><![CDATA[<hr><h2 id="报错信息如下："><a href="#报错信息如下：" class="headerlink" title="报错信息如下："></a>报错信息如下：</h2><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211229170329252.png" alt="image-20211229170329252"></p><span id="more"></span><p>示例代码：</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211229170409275.png" alt="image-20211229170409275"></p><p>查询后发现是因为flask未使用WSGI启动，将代码改成使用WSGI启动就可以了。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><ul><li>导包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> pywsgi</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211229170551745.png" alt="image-20211229170551745"></p><ul><li>修改启动方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    server = pywsgi.WSGIServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">5000</span>),app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20211229170720140.png" alt="image-20211229170720140"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><ul><li>导包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br></pre></td></tr></table></figure><ul><li>修改启动方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">5000</span>, app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>实测两种都可以。</p>]]></content>
      
      
      <categories>
          
          <category> 日常问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis编译报致命错误：jemallocjemalloc.h：没有那个文件或目录</title>
      <link href="/2021/12/23/redis%E7%BC%96%E8%AF%91%E6%8A%A5%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF%EF%BC%9Ajemallocjemalloc.h%EF%BC%9A%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/"/>
      <url>/2021/12/23/redis%E7%BC%96%E8%AF%91%E6%8A%A5%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF%EF%BC%9Ajemallocjemalloc.h%EF%BC%9A%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>在redis目录执行make命令时可能会出现报错：jemalloc/jemalloc.h：没有那个文件或目录</p><span id="more"></span><p>分配器allocator， 如果有MALLOC  这个 环境变量， 会有用这个环境变量去建立Redis。</p><p>而且libc 并不是默认的 分配器， 默认的是 jemalloc, 因为 jemalloc 被证明 有更少的 fragmentation problems 比libc。</p><p>但是如果你又没有jemalloc 而只有 libc 当然 make 出错。 所以加这么一个参数,运行如下命令：</p><p><code>make MALLOC=libc</code></p>]]></content>
      
      
      <categories>
          
          <category> 日常问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/21/hello-world/"/>
      <url>/2021/12/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><code>hello world</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用python+阿里云短信服务实现向手机发送短信</title>
      <link href="/2021/01/06/%E4%BD%BF%E7%94%A8python+%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1/"/>
      <url>/2021/01/06/%E4%BD%BF%E7%94%A8python+%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>最近接触了python，需要使用阿里云实现发送短信的功能，比较简单，随手记录一下。</p><span id="more"></span><h5 id="第一步：注册阿里云"><a href="#第一步：注册阿里云" class="headerlink" title="第一步：注册阿里云"></a>第一步：注册阿里云</h5><p>这个应该不用说吧，去<a href="https://cn.aliyun.com/">阿里云官网</a>按照步骤注册登录就可以了。</p><h5 id="第二步：购买短信服务"><a href="#第二步：购买短信服务" class="headerlink" title="第二步：购买短信服务"></a>第二步：购买短信服务</h5><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106101347206.png" alt="image-20220106101347206"></p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106101409375.png" alt="image-20220106101409375"></p><p>在<code>控制台—短信服务</code>中可以查看</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106101500207.png" alt="image-20220106101500207"></p><h5 id="第三步：前期准备"><a href="#第三步：前期准备" class="headerlink" title="第三步：前期准备"></a>第三步：前期准备</h5><h6 id="1、配置模板"><a href="#1、配置模板" class="headerlink" title="1、配置模板"></a>1、配置模板</h6><p>在 <code>快捷操作—模板</code> 点击<code>模板</code></p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106102012340.png" alt="image-20220106102012340"></p><p>点击<code>添加模板</code>添加自己需要的模板</p><h6 id="2、配置签名"><a href="#2、配置签名" class="headerlink" title="2、配置签名"></a>2、配置签名</h6><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106102226139.png" alt="image-20220106102226139"></p><p>同样，点击<code>添加签名</code>添加自己所需要的</p><h6 id="3、获取AK"><a href="#3、获取AK" class="headerlink" title="3、获取AK"></a>3、获取AK</h6><p><del>AK47谁不爱呢</del></p><p>AK，即AccessKey，秘钥</p><p>鼠标放到右上角头像上，点击<code>AccessKey管理</code></p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106102538388.png" alt="image-20220106102538388"></p><p>如果没有可以创建一个，如果有，请记住AccessKey ID和AccessKey Secret，后者可以在对应AK ID行的<code>查看Secret</code>查看到，这两个先记在某个地方，一会要用。</p><h5 id="第四步：安装阿里云SDK"><a href="#第四步：安装阿里云SDK" class="headerlink" title="第四步：安装阿里云SDK"></a>第四步：安装阿里云SDK</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aliyun-python-sdk-core-v3</span><br></pre></td></tr></table></figure><h5 id="第五步：代码"><a href="#第五步：代码" class="headerlink" title="第五步：代码"></a>第五步：代码</h5><p>短信那个界面还记得吗？点这里</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106103125812.png" alt="image-20220106103125812"></p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106103457510.png" alt="image-20220106103457510"></p><p>你可以选择复制代码或者下载demo，下载demo会简单很多</p><p>下载demo的话只需要把这三个复制到项目：</p><p><img src="https://gitee.com/picgo-drawing-bed/ren-typora/raw/master/typora/image-20220106103817903.png" alt="image-20220106103817903"></p><p>之后创建一个<code>aliyunMsg.py</code>（命名随意），导包依据实际情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> importlib <span class="keyword">import</span> reload</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkdysmsapi.request.v20170525 <span class="keyword">import</span> SendSmsRequest</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> const</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REGION = const.REGION_ID</span><br><span class="line">ACCESS_KEY_ID = const.ACCESS_KEY_ID</span><br><span class="line">ACCESS_KEY_SECRET = const.ACCESS_KEY_SECRET</span><br><span class="line"></span><br><span class="line">acs_client = AcsClient(ACCESS_KEY_ID, ACCESS_KEY_SECRET, REGION)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms</span>(<span class="params">business_id, phone_numbers, sign_name, template_code, template_param=<span class="literal">None</span></span>):</span></span><br><span class="line">    smsRequest = SendSmsRequest.SendSmsRequest()</span><br><span class="line">    <span class="comment"># 申请的短信模板编码,必填</span></span><br><span class="line">    smsRequest.set_TemplateCode(template_code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 短信模板变量参数</span></span><br><span class="line">    <span class="keyword">if</span> template_param <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        smsRequest.set_TemplateParam(template_param)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置业务请求流水号，必填。</span></span><br><span class="line">    smsRequest.set_OutId(business_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 短信签名</span></span><br><span class="line">    smsRequest.set_SignName(sign_name);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 短信发送的号码列表，必填。</span></span><br><span class="line">    smsRequest.set_PhoneNumbers(phone_numbers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用短信发送接口，返回json</span></span><br><span class="line">    smsResponse = acs_client.do_action_with_exception(smsRequest)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> smsResponse</span><br></pre></td></tr></table></figure><p><code>const.py</code>中如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ACCESS_KEY_ID/ACCESS_KEY_SECRET 根据实际申请的账号信息进行替换</span></span><br><span class="line">ACCESS_KEY_ID = <span class="string">&quot;第三步的AK ID&quot;</span></span><br><span class="line">ACCESS_KEY_SECRET = <span class="string">&quot;第三步的AK Secret&quot;</span></span><br><span class="line"></span><br><span class="line">ALIYUN_SMS_SIGN_NAME = <span class="string">&quot;你的签名&quot;</span></span><br><span class="line">SMS_CODE = <span class="string">&quot;你的短信模板ID&quot;</span></span><br><span class="line">REGION_ID = <span class="string">&#x27;cn-hangzhou&#x27;</span><span class="comment"># 服务器地区</span></span><br></pre></td></tr></table></figure><p>然后配置<code>parser.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ali_sms_code_parser = reqparse.RequestParser()</span><br><span class="line">ali_sms_code_parser.add_argument(<span class="string">&quot;phoneNum&quot;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,required=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>最后实现接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliSmsCodeView</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        args = ali_sms_code_parser.parse_args()</span><br><span class="line">        business_id = uuid.uuid1()</span><br><span class="line">        telephone = args[<span class="string">&quot;phoneNum&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(telephone) != <span class="number">11</span> <span class="keyword">and</span> <span class="built_in">len</span>(telephone) != <span class="number">13</span>:</span><br><span class="line">            <span class="keyword">return</span> make_response(code=<span class="number">1</span>, message=<span class="string">u&quot;手机号码不正确&quot;</span>)</span><br><span class="line">        <span class="comment"># 生成随机验证码</span></span><br><span class="line">        code = generate_verification_code()</span><br><span class="line">        <span class="comment"># 设定需要的参数</span></span><br><span class="line">        params = <span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span> + code + <span class="string">&quot;\&quot;&#125;&quot;</span></span><br><span class="line">        <span class="comment"># 发送短信</span></span><br><span class="line">        send_sms(business_id, telephone,const.ALIYUN_SMS_SIGN_NAME,const.SMS_CODE, params)</span><br><span class="line">        cache.<span class="built_in">set</span>(telephone, code, timeout=<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> make_response()</span><br></pre></td></tr></table></figure><p><code>make_response()</code>是我自己定义的方法，将响应转化为JSON格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_response</span>(<span class="params">status_code=<span class="number">200</span>, code=<span class="number">0</span>, message=<span class="string">&#x27;&#x27;</span>, body=<span class="literal">None</span></span>):</span></span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&quot;head&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: code,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: message</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: body</span><br><span class="line">    &#125;</span><br><span class="line">    response = Response(json.dumps(result))</span><br><span class="line">    response.status_code = status_code</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
